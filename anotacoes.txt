* Node = plataforma que permite rodar JS no lado do servidor;
* Usa V8, engine do chrome para interpretar JS para contextos onde não estamos no browser;
* Streming: input output non in block, a gente consegue realizar ações parciais sem precisar
  interromper outras que estejam ocorrendo ao mesmo tempo;
    * Certa concorrência de ações;
* Ex: quando precisamos ler um arquivo csv grande
    * Essa certa "concorrência" permite você ler e já ir tratando dados de pouco em pouco 
      sem precisar ler um arquivo inteiro;

AULA 1

* packtage: nome, descrição, versão do node, dependencias externas;

AULA 3 - Node Watch
 
* Para criar atalhos: vai no packtage.json, na parte de scripts coloca "exComando": "--seu comando aqui"
* Com isso, você pode só executar "npm run exComando" e pronto! Vai rodar...

AULA 4 - Rotas

* Rotas são formas de o cliente executar uma ação (remover, listar, inserir usuários)
* Ao trabalhar com HTTP na requisição, temos dois pontos principais:
  * URL
  * Método usado
* Métodos de requisição HTTP:
  * GET - conseguir informações;
  * PUT - atualização de várias informações;
  * PATCH - atualização de informação específica;
  * DELETE - adivinha?
  * POST - inserir nova informação;
* geralmente é Método + URL 
  => GET / meusite.com.br:3333/users => buscando usuarios
  => POST/ meusite.com.br:3333/insert => criar um usuário

AULA 5 - Statless e Statfull

* Statfull depende de você ter informações salvas na memória para aplicação funcionar;
* Statless salva não na memória, mas em bancos de dados externos (arquivos externos) e não precisa de dados da memoria atual para funcionar1
* Cabeçalhos são metadados que podem ser usados para você dizer como o front deve interpretar dados retornados do backend

COMANDOS

* para usar es module: vá para package.json e adicione "type": "module"
* npm init -y => pede para criar um arquivo padrão packtage.json sem ficar perguntando coisa;
* node src/seuArquivo.js  (exemplo) : serve para executar o arquivo que é ums server
  * Enquanto estiver escutando, vai responder o que tá nas funções
* node --watch src/seuArquivo.js deixar node reiniciando servidor e captar mudanças

HTTP STATUS CODES

* Comunicação ao front end se as requisições deram certo e se não, qual o motivo do erro para tratamento;
* Lista
  * 100 - 199 = informações gerais
  * 200 - 299 = mensagens de sucesso variadas
  * 300 - 499 = mensagens de redirecionamento (301=redirecionado definitivo, 302=redirecionado temporario)
    * Requisições para rotas que não existem mais e foram colocadas novas rotas no lugar
  * 400 - 599 = erro client (informado algo de forma errada no front end)
    * client = o front que faz a requisição
  * 500 - 599 = server error (algo de errado no back-end, não é erro de client)
  

